Kyle Timmermans
Prof. Hakan
Midterm Test 1
3/11/21

1) In order to view hidden files in linux the "-a" flag must be added to the command "ls"  e.g. ls -la


2) this_is_my_var,myvar


3) var today=`date`


4) Option 'c': It directs the error output of the ls command to ERR


5) chmod g-x .


6) sort -k 5 -nr world.txt | head -15 | cat â€“n

	- 5th column is area in sqaure miles
	- cat -n adds numbers next to country


7) ls g?.sh --> g1.sh g2.sh
   ls [fw]* --> file1.txt file2.txt written_test.doc
   ls [a-g]* --> file1.txt file2.txt g1.sh g2.sh
   ls [^fg]* --> written_test.doc


8) grep New.*York
  		a. NewYork
  		b. NewwYork
  		c. NewYYork
  		e. New York
  		f. New..York


9) 1st Part:
	grep "\(([0-9]\{3\})\|[0-9]\{3\}\)[ -\]\?[0-9]\{3\}[ -\]\?[0-9]\{4\}" phone.txt
   
   2nd Part:
   	grep "\(([0-9]\{3\})\|[0-9]\{3\}\)[ -\]\?[0-9]\{3\}[ -\]\?[0-9]\{4\}" phone.txt | tr -dc '[:alnum:]\n' | cut --characters 1-3,4-6,7-10 --output-delimiter ' '
	

10)
	A) grep -o -w "\w\{3\}" wordlist.txt

	B) grep -o -w "\w\{6,\}" wordlist.txt



11) #!/bin/bash
    for i in {1..3}
       do
         read -p 'What is the password? ' password
         if [ $password == 'secret' ]; then
            echo 'Welcome!'
            break
         elif [ $i -lt 3 ]; then     # If not correct and < 3
            echo 'Limited to three tries'
         else  # If 3 and not correct, kick out
           echo 'Good Bye'
           break
         fi
       done



12) #!/bin/bash
	echo "Enter a large EVEN number"
	read TOP

	declare -i sum=0  # Total which is added on top of
	declare -i i=0 # Holds the even number for current loop

	while [ $i -le $TOP ]   # While i <= x
   		do
     		echo "looping"
     		sum=sum+i
     		i=i+2  # Always even after adding 2 to 0
   		done

	echo $sum  # Final output



13) #!/bin/bash
	echo "Enter a sentence"
	read sentence

	echo "The number of words in your sentence is: `echo $sentence | wc -w`"



14) #!/bin/bash
	echo "Enter your first number"
	read start
	echo "Enter your second number"
	read end

	declare -i sum=0

	for ((i=$start; i<=$end; i++)) 
  		do
    		sum=sum+i
  		done

	echo $sum

